name: Blue-Green Deployment

on:
  push:
    branches:
      - release

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and Push Docker Image
      run: |
        docker build \
          --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
          --build-arg PORTONE_API_KEY=${{ secrets.PORTONE_API_KEY }} \
          --build-arg PORTONE_API_SECRET=${{ secrets.PORTONE_API_SECRET }} \
          --build-arg OAUTH_PROVIDERS=${{ secrets.OAUTH_PROVIDERS }} \
          --build-arg GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}\
          --build-arg GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}\
          --build-arg KAKAO_CLIENT_ID=${{secrets.KAKAO_CLIENT_ID}}\
          --build-arg KAKAO_CLIENT_SECRET=${{secrets.KAKAO_CLIENT_SECRET}}\
          --build-arg GH_CLIENT_ID=${{secrets.GH_CLIENT_ID}}\
          --build-arg GH_CLIENT_SECRET=${{secrets.GH_CLIENT_SECRET}}\
          --build-arg SPRING_R2DBC_URL=${{ secrets.SPRING_R2DBC_URL }} \
          --build-arg SPRING_R2DBC_PASSWORD="${{ secrets.SPRING_R2DBC_PASSWORD }}" \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/vintage-focus:latest ./backend
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/vintage-focus:latest
  deploy:
    name: Deploy to EC2 with Blue-Green
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          sudo -E bash -c '
            CURRENT_CONTAINER=$(docker ps --filter "name=blue" --filter "status=running" -q)
            if [ -n "$CURRENT_CONTAINER" ]; then
              ACTIVE="blue"
              STANDBY="green"
            else
              ACTIVE="green"
              STANDBY="blue"
            fi
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vintage-focus:latest
            docker stop $STANDBY || true
            docker rm $STANDBY || true
            docker run -d --name $STANDBY --network vintage-focus-network ${{ secrets.DOCKERHUB_USERNAME }}/vintage-focus:latest

            cp ./conf.d/default.conf ./conf.d/default.conf.tmp
            sed "s/proxy_pass http:\/\/$ACTIVE:8094/proxy_pass http:\/\/$STANDBY:8094/" ./conf.d/default.conf.tmp > ./conf.d/default.conf.tmp2
            mv ./conf.d/default.conf.tmp2 ./conf.d/default.conf
            rm ./conf.d/default.conf.tmp

            docker exec nginxcontainer nginx -t || { echo "Nginx config test failed. Aborting."; docker stop $STANDBY; exit 1; }
            docker exec nginxcontainer nginx -s reload

            # Cleanup old container
            docker stop $ACTIVE
            echo "Deployment complete. $STANDBY is now active, $ACTIVE stopped."
          '
